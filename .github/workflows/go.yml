# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]

jobs:

  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: go get -d -v ./...
      
    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: go get -d -v ./...
      
    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.21

      - name: Get dependencies
        run: go get -v ./...

      - name: Build for Linux
        run: |
          PREFIX="build"
          OS="linux"
          APPS="datasetArchiver datasetGetProposal datasetRetriever datasetIngestor datasetCleaner"
          
          for GOOS in $OS; do
            OUT="$PREFIX/$GOOS"
            mkdir -p "$OUT"
            for APP in $APPS; do
              GOOS=$GOOS GOARCH=amd64 go build -o "$OUT/$APP" "./cmd/$APP"
            done
          done

      - name: Archive binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: build

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.21

      - name: Get dependencies
        run: go get -v ./...

      - name: Build for Windows
        run: |
          $PREFIX="build"
          $OS="windows"
          $APPS="datasetArchiver", "datasetGetProposal", "datasetRetriever", "datasetIngestor", "datasetCleaner"
          
          foreach ($GOOS in $OS) {
            $OUT="$PREFIX/$GOOS"
            mkdir -p "$OUT"
            foreach ($APP in $APPS){
              $env:GOOS=$GOOS
              $env:GOARCH="amd64"
              go build -o "$OUT/$APP.exe" "./cmd/$APP"
            }
          }

      - name: Archive binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: build
