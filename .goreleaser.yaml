# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj


# Test with `goreleaser --snapshot --clean`
# To release, create a tag and push it to Github: `git tag -a v0.1.0 -m "First release" && git push origin v0.1.0`. GoReleaser enforces semantic versioning and will error on non-compliant tags.
# For it to work, you need to have the `GITHUB_TOKEN` environment variable set export GITHUB_TOKEN="YOUR_GH_TOKEN". The minimum permissions the GITHUB_TOKEN should have to run this are write:packages

# Now you can run GoReleaser at the root of your repository: `goreleaser release`
# For dry run, see https://goreleaser.com/quick-start/#dry-run

version: 1

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - id: "scicat-cli"
    flags:
      - -trimpath
    ldflags:
      - "-s -w -X 'github.com/paulscherrerinstitute/scicat/cmd/commands.VERSION={{.Version}}'"
    env:
      - CGO_ENABLED=0
    dir: ./cmd/
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
    main: .
    binary: scicat-cli


archives:
  - format: tar.gz
    wrap_in_directory: true
    name_template: >-
      {{ .ProjectName }}_
      {{- .Version }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

release:
  prerelease: auto
